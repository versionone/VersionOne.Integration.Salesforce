@isTest
private class V1CaseCollectorTestSuite {

    static testMethod void getCaseByCaseNumberTest() {
        Case case1 = new Case(Subject='TestCase1');
        insert new Case[] {case1};
        case1 = [SELECT CaseNumber, Subject FROM Case WHERE Id = :case1.Id];

        Case newCase = V1CaseCollector.getCaseByCaseNumber(case1.CaseNumber);
        System.assertEquals(case1.CaseNumber, newCase.CaseNumber, 'Incorrect case numbers.');
        System.assertEquals(case1.Subject, newCase.Subject, 'Incorrect subject.');
    }

    static testMethod void getCaseByCaseIdTest() {
        Case case1 = new Case(Subject='TestCase1');
        insert new Case[] {case1};
        case1 = [SELECT CaseNumber, Subject FROM Case WHERE Id = :case1.Id];

        Case newCase = V1CaseCollector.getCaseByCaseId(case1.Id);
        System.assertEquals(case1.CaseNumber, newCase.CaseNumber, 'Incorrect case numbers.');
        System.assertEquals(case1.Subject, newCase.Subject, 'Incorrect subject.');
    }

    static testMethod void updateCaseTest() {
        String defectId = '123';
        String devStatus = 'In Progress';
        Case case1 = new Case(Subject='TestCase1');
        insert new Case[] {case1};
        case1 = [SELECT CaseNumber, Subject, V1Association__c, V1DefectId__c, V1DevelopmentStatus__c FROM Case WHERE Id = :case1.Id];

        V1CaseCollector.updateCase(case1, defectId, true, devStatus);
        Case newCase = [SELECT CaseNumber, Subject, V1Association__c, V1DefectId__c, V1DevelopmentStatus__c FROM Case WHERE Id = :case1.Id];
        System.assertEquals(devStatus, newCase.V1DevelopmentStatus__c, 'Incorrect case numbers.');
        System.assertEquals(case1.CaseNumber, newCase.CaseNumber, 'Incorrect case numbers.');
        System.assertEquals(case1.Subject, newCase.Subject, 'Incorrect subject.');
        System.assertEquals(true, newCase.V1Association__c, 'Case has to be associated with defect from Versionone.');
        System.assertEquals(defectId, newCase.V1DefectId__c, 'Incorrect associated defect id from VersionOne.');
    }

    static testMethod void updateDeveloperStatusTest() {
        String status = 'In Progress';
        Case case1 = new Case(Subject='TestCase1');
        insert new Case[] {case1};
        case1 = [SELECT V1DevelopmentStatus__c FROM Case WHERE Id = :case1.Id];

        V1CaseCollector.updateDeveloperStatus(case1, status);
        case1 = [SELECT V1DevelopmentStatus__c FROM Case WHERE Id = :case1.Id];
        System.assertEquals(status, case1.V1DevelopmentStatus__c, 'Incorrect case numbers.');
	}

    static testMethod void getMappingListTest() {
		for (MappingV1ProjectsToSFProducts__c obj :
		    [select Id from MappingV1ProjectsToSFProducts__c]) {
		    delete obj;
		}
    	String projectName1 = 'Project Name';
    	String productName1 = 'Product Name';
    	String projectToken1 = 'Scope:1234';
    	String productId1 = 'GDS';
    	MappingV1ProjectsToSFProducts__c mappingData1 = new MappingV1ProjectsToSFProducts__c();
    	mappingData1.SFProductId__c = productId1;
    	mappingData1.SFProductName__c = productName1;
    	mappingData1.V1ProjectToken__c = projectToken1;
    	mappingData1.V1ProjectName__c = projectName1;
    	String projectName2 = 'Project Name 2';
    	String productName2 = 'Product Name 2';
    	String projectToken2 = 'Scope:2468';
    	String productId2 = 'GDS 2';
    	MappingV1ProjectsToSFProducts__c mappingData2 = new MappingV1ProjectsToSFProducts__c();
    	mappingData2.SFProductId__c = productId2;
    	mappingData2.SFProductName__c = productName2;
    	mappingData2.V1ProjectToken__c = projectToken2;
    	mappingData2.V1ProjectName__c = projectName2;
    	insert new MappingV1ProjectsToSFProducts__c[]{mappingData1, mappingData2};

    	List<MappingV1ProjectsToSFProducts__c> mappings = V1CaseCollector.getMappingList();
    	System.assertEquals(2, mappings.size(), 'Incorrect number of mappings.');
    	System.assertEquals(productId1, mappings.get(0).SFProductId__c, 'Incorrect product id for first mapping.');
    	System.assertEquals(productName1, mappings.get(0).SFProductName__c, 'Incorrect product name for first mapping.');
    	System.assertEquals(projectToken1, mappings.get(0).V1ProjectToken__c, 'Incorrect project token for first mapping.');
    	System.assertEquals(projectName1, mappings.get(0).V1ProjectName__c, 'Incorrect project name for first mapping.');
    	System.assertEquals(productId2, mappings.get(1).SFProductId__c, 'Incorrect product id for second mapping.');
    	System.assertEquals(productName2, mappings.get(1).SFProductName__c, 'Incorrect product name for second mapping.');
    	System.assertEquals(projectToken2, mappings.get(1).V1ProjectToken__c, 'Incorrect project token for second mapping.');
    	System.assertEquals(projectName2, mappings.get(1).V1ProjectName__c, 'Incorrect project name for second mapping.');
	}

    static testMethod void addNewMappingTest() {
    	String projectName = 'Project Name';
    	String productName = 'Product Name';
    	String projectToken = 'Scope:1234';
    	String productId = 'GDS';
    	ProjectProductMapping mapping = new ProjectProductMapping(projectName, true, productName);
    	mapping.projectToken = projectToken;
    	mapping.productId = productId;
    	V1CaseCollector.addNewMapping(mapping);

		MappingV1ProjectsToSFProducts__c newMapping = [SELECT ID FROM MappingV1ProjectsToSFProducts__c WHERE SFProductId__c =: productId and SFProductName__c =: productName and V1ProjectToken__c =: projectToken and V1ProjectName__c =: projectName];
    	System.assertNotEquals(null, newMapping, 'Incorrect mapping data from the base.');
	}
}